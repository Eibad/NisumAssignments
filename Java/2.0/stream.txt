.collect for return
.map if specifc thing

Steam = funtional interface

Optional<Employee> = a bhi sakt or nhi bhi

ArrayList<Employee> employeesList =new ArrayList<>();
        ArrayList<Employee> result1 =  new ArrayList<>();

        Employee e1 = new Employee(1,"usama",25,20000);
        Employee e2 = new Employee(2,"Rameez",26,25000);
        Employee e3 = new Employee(3,"Haroon",23,30000);
        Employee e4 = new Employee(4,"Ebad",21,45000);
        Employee e5 = new Employee(5,"usama",25,40000);
        employeesList.add(e1);
        employeesList.add(e2);
        employeesList.add(e3);
        employeesList.add(e4);
        employeesList.add(e5);

        for (Employee data:employeesList){
            if (data.getSalary() >= 30000){
                result1.add(data);
                System.out.println("Salary -->" + data);
            }
        }

	List<Employee> rsult = employeesList.stream().filter(e-> e.getSalary >=3000).collect(Collectors.toList());
	List<Integer> age = employeesList.stream().filter(e->e.getAge > 20 && e.age < 10).map(e->e.getAge()).collect(Collectors.toList());
	List<Integer> age = employeesList.stream().filter(e->e.getAge > 20).filter(e.age < 10).map(Employee :: getAge).collect(Collectors.toList());
	Employee empMAxSalary = employeesList.stream().max((Employee em, Employee em2) -> em.getSalary() > em2.getSalary() ? 1 : -1).get();

	Employee empAged = employeesList.stream().filter(e->e.getAge() > 40).findAny().orElse(null)